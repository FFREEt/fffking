class Solution {
public:

    int dfs(int ans ,string &s,int  *dfss,unordered_set<string> &set){
            if( ans == -1 )  return 0;                //字符串为长0，返回0
            if(dfss[ans] != -1) return dfss[ans];     //已经搜出的答案直接返回
            int anss = dfs(ans -1 ,s,dfss ,set) +1 ;  //否则先默认最后一个字符不能消去
            for(int i=0 ; i<=ans ; i++){              //枚举长度，查询每个长度下是否有字符满足更短的情况
                                                      //这里的边界从0到全身长度 所以为 <=
                if(set.count(s.substr(i,ans+1-i)))    //count函数用于查询字串是否存在
                                                      //substr(a,b)复制从a下标开始b个字符
                    anss = min (anss , dfs(i-1,s,dfss ,set) );  
            }
            dfss[ans] = anss ;
            return anss;
        }

    int minExtraChar(string s, vector<string>& dictionary) {
        unordered_set<string> set(dictionary.begin(),dictionary.end());  // 对其进行哈希处理，方便查找
        int dfss[50 + 1] ,l=s.size();
        for(int i=0 ; i<51 ; i++) dfss[i] = -1;  // 递推写法时不需要设-1为初始标记
        // return dfs(s.size() -1 ,s ,dfss ,set);             递归写法

        dfss[0] = 0;           // 
        for(int i=1 ; i<=l ;i++){  //枚举长度
            dfss[i] = dfss[i-1] +1 ;
            for( int j=0; j<=i ;j++)  //对每个长度进行更新
            {
                if(set.count(s.substr(j,i-j)))  // 如果i =1 正好错开一位，这里就不需要+1 了
                    dfss[i]=min(dfss[i],dfss[j]);
            }
            printf("%d ",dfss[i]);
        }
        return dfss[l];
    }
};


/*------------关于这里的边界问题---------------
实际上这的return dfs(n-1) 可以理解为为了对齐所调用的s串，而函数中的 res = dfs(i-1) +1 
才是真正的递归导致n-1的传参
所以才有递归边界 dfs(-1)--> 即字符串长度为0 ，返回值始终为0的情况

def minExtraChar(self, s: str, dictionary: List[str]) -> int:
        d = set(dictionary)
        @cache
        def dfs(i: int) -> int:
            if i < 0: return 0
            res = dfs(i - 1) + 1  # 不选
            for j in range(i + 1):  # 枚举选哪个
                if s[j:i + 1] in d:
                    res = min(res, dfs(j - 1))
            return res
        return dfs(len(s) - 1)


---------------传参开销问题---------------
int dfs(int ans ,string s,int  *dfss,unordered_set<string> set)   完全不使用指针/引用
888ms 5.33%      258.39MB 5.33%

int dfs(int ans ,string &s,int  *dfss,unordered_set<string> set)    &string 应该是没啥用
1004ms 5.33%      258.45MB 5.33%

int dfs(int ans ,string &s,int  *dfss,unordered_set<string> &set)
184ms 38.46%       79.04MB  66.86%                       明显改善

总结：如果即使是不修改内容，传参上也可以产生五倍的差距，允许的情况下尽量使用指针/引用，当然最好递推拒绝递归
*/
